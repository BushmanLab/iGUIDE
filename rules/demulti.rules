# -*- mode: Snakemake -*-
# Demultiplexing Rules

rule demultiplex:
  input:
    configFile=ancient("configs/" + RUN + ".config.yml"),
    sampleInfo=config["Sample_Info"],
    R1=config["R1"],
    R2=config["R2"],
    I1=config["I1"],
    I2=config["I2"]
  output:
    data=temp(expand(
      RUN_DIR + "/processData/{sample}.{type}.fastq.gz", \
      sample=SAMPLES, type=TYPES)),
    ambi=temp(expand(
      RUN_DIR + "/processData/ambiguous.{type}.fastq.gz", type=TYPES)),
    unas=temp(expand(
      RUN_DIR + "/processData/unassigned.{type}.fastq.gz", type=TYPES)),
    stat=temp(
      RUN_DIR + "/processData/" + RUN + ".demulti.stat")
  params:
    tool=ROOT_DIR + "/tools/rscripts/demulti.R",
    bc1Len=config["barcode1Length"],
    bc2Len=config["barcode2Length"],
    bc1=config["barcode1"],
    bc2=config["barcode2"],
    bc1Mis=config["bc1Mismatch"],
    bc2Mis=config["bc2Mismatch"],
    statName=RUN + ".demulti.stat"
  log: 
    RUN_DIR + "/logs/demultiplex." + RUN + ".log"
  threads: 
    config["demultiCores"]
  shell:
    """
    Rscript {params.tool} -m {ROOT_DIR}/{input.sampleInfo} \
      --read1 {input.R1} --read2 {input.R2} \
      --index1 {input.I1} --index2 {input.I2} \
      --barcode1 {params.bc1} --barcode1Length {params.bc1Len} \
      --barcode2 {params.bc2} --barcode2Length {params.bc2Len} \
      --bc1Mismatch {params.bc1Mis} --bc2Mismatch {params.bc2Mis} \
      -o {RUN_DIR}/processData --stat {params.statName} -c {threads} \
      --compress > {log} 2>&1
    """
