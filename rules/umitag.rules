# -*- mode: Snakemake -*-
# Sequence Collecting Rules

rule collect_umitags:
  input:
    RUN_DIR + "/process_data/{sample}.I2.fastq.gz"
  output:
    seq=temp(RUN_DIR + "/process_data/{sample}.I2.trim.fastq.gz"),
    umi=RUN_DIR + "/process_data/{sample}.umitags.fasta.gz",
    stat=temp(RUN_DIR + "/process_data/{sample}.umitags.stat")
  params:
    tool=ROOT_DIR + "/tools/rscripts/trim.R",
    seq=lambda wildcards: UMIseqs[wildcards.sample],
    mis=config["bc2Mismatch"]
  log:
    RUN_DIR + "/logs/{sample}.umitag.log"
  resources:
    mem_mb=lambda wildcards, attempt: attempt * config["trimMB"]
  shell:
    """
    Rscript {params.tool} {input} -o {output.seq} \
      -l {params.seq} --leadMismatch {params.mis} --noQualTrimming \
      --minSeqLength 0 --collectRandomIDs {output.umi} --stat {output.stat} \
      --compress > {log} 2>&1
    """
