# -*- mode: Snakemake -*-
# Final Processing Rules

rule all_uniq_sites:
  input:
    expand(RUN_DIR + "/process_data/{sample}.uniq.csv", sample=SAMPLES)
  output:
    RUN_DIR + "/output/unique_sites." + RUN + ".csv"
  params:
    RUN_DIR + "/process_data"
  resources:
    mem_mb = lambda wildcards, attempt: attempt * config["defaultMB"]
  shell:
    """
    head -n 1 -q {params}/*.uniq.csv | uniq > {output}
    for UNIQ in $(ls {params}/*uniq.csv); do
        tail -n +2 $UNIQ >> {output}
    done
    """

rule compress_uniq_sites:
  input: 
    sites=RUN_DIR + "/output/unique_sites." + RUN + ".csv",
    edits=RUN_DIR + "/output/incorp_sites." + RUN + ".rds"
  output: RUN_DIR + "/output/unique_sites." + RUN + ".csv.gz"
  resources:
    mem_mb = lambda wildcards, attempt: attempt * config["defaultMB"]
  shell: "gzip {input.sites}"


def all_umitag_inputs(wildcards):
  if (config["UMItags"]):
    return expand(
      RUN_DIR + "/process_data/{sample}.umitags.fasta.gz", sample = SAMPLES)
  else:
    return []

def all_multi_inputs(wildcards):
  if (config["recoverMultihits"]):
    return expand(
      RUN_DIR + "/process_data/{sample}.multihits.rds", sample = SAMPLES)
  else:
    return []

rule assimilate_sites:
  input:
    sites=RUN_DIR + "/output/unique_sites." + RUN + ".csv",
    umitag=all_umitag_inputs,
    multi=all_multi_inputs
  output:
    incorp=RUN_DIR + "/output/incorp_sites." + RUN + ".rds",
    stat=temp(RUN_DIR + "/process_data/" + RUN + ".assim.stat")
  params:
    config = RUN_DIR + "/" + "config.yml",
    tool = ROOT_DIR + "/tools/rscripts/assimilate_incorp_data.R"
  log:
    RUN_DIR + "/logs/" + RUN + ".assim.log"
  resources:
    mem_mb=lambda wildcards, attempt: attempt * config["assimilateMB"]
  run:
    call_str="Rscript {params.tool} {input.sites} -o {output.incorp} "
    if (config["UMItags"]):
        call_str=call_str + "-u {input.umitag} "
    if (config["recoverMultihits"]):
        call_str=call_str + "-m {input.multi} "
    call_str=call_str + "-c {params.config} --stat {output.stat} > {log} 2>&1"
    shell(call_str)


rule iguide_evaluation:
  input: RUN_DIR + "/output/incorp_sites." + RUN + ".rds"
  output: temp(RUN_DIR + "/output/iguide.eval." + RUN + ".rds")
  params: 
    tool = ROOT_DIR + "/tools/rscripts/evaluate_incorp_data.R",
    config = RUN_DIR + "/" + "config.yml"
  log: RUN_DIR + "/logs/" + RUN + ".eval.log"
  resources:
    mem_mb=lambda wildcards, attempt: attempt * config["evaluateMB"]
  run:
    call_str="Rscript {params.tool} {params.config} -o {output}"
    if (config["suppFile"]):
      call_str=call_str + " -s " + ROOT_DIR + "/" + config["Supplemental_Info"]
    call_str=call_str + " > {log} 2>&1"
    shell(call_str)


def report_supp(wildcards):
  supp_str = str()
  if (config["figures"]): 
      supp_str = supp_str + "-f "
  if (config["reportData"]):
      supp_str = supp_str + "-d "
  if (config["infoGraphic"]):
      supp_str = supp_str + "-g "
  return supp_str
        
rule run_report:
  input: RUN_DIR + "/output/iguide.eval." + RUN + ".rds"
  output: RUN_DIR + "/reports/report." + RUN + ".html"
  params: 
    tool = ROOT_DIR + "/tools/rscripts/generate_iGUIDE_report.R",
    config = RUN_DIR + "/" + "config.yml",
    supp = report_supp
  log: RUN_DIR + "/logs/" + RUN + ".report.log"
  resources:
    mem_mb=lambda wildcards, attempt: attempt * config["reportMB"]
  shell:
    """
    Rscript {params.tool} {input} -o {output} {params.supp} > {log} 2>&1
    """
